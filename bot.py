import re
import os
import logging
from datetime import datetime, timedelta
from uuid import uuid4

from dateutil import parser as dateparser
from apscheduler.schedulers.background import BackgroundScheduler

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

TOKEN = os.getenv("TG_BOT_TOKEN")  # –ø–æ–ª–æ–∂–∏ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–∞–º—è—Ç—å –≤ —Ä–∞–Ω—Ç–∞–π–º–µ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ sqlite/json)
GIVEAWAYS = {}  # id -> dict
scheduler = BackgroundScheduler(timezone="Europe/Kyiv")
scheduler.start()

KEYWORDS = [
    r"\bgiveaway\b", r"\b—Ä–æ–∑—ã–≥—Ä—ã—à\b", r"\bgift(s)?\b", r"\bstar(s)?\b", r"\b–ø—Ä–∏–∑\b",
    r"\b–ø–æ—Ä—Ç–∞–ª(—Å)?\b", r"\bportals\b", r"\b—Ç–æ–Ω\b", r"\bton\b"
]

URL_REGEX = r"(https?://[^\s]+)"
DEADLINE_HINTS = [r"–¥–æ\s+(\d{1,2}[:.]\d{2})", r"deadline[:\s]+([^\n]+)", r"–∑–∞–∫–∞–Ω—á[^\n]*?(\d{1,2}\s+\w+|\d{1,2}[:.]\d{2})"]

def extract_links(text: str):
    return re.findall(URL_REGEX, text or "", flags=re.IGNORECASE)

def matches_keywords(text: str):
    t = text.lower() if text else ""
    return any(re.search(pat, t) for pat in KEYWORDS)

def extract_deadline(text: str):
    if not text: return None
    # –ø—Ä–æ–±—É–µ–º –≤—ã—Ü–µ–ø–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è
    # 1) —è–≤–Ω–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è
    try:
        dt = dateparser.parse(text, dayfirst=True, fuzzy=True)
        if dt and dt > datetime.now(dt.tzinfo or None):
            return dt
    except Exception:
        pass
    # 2) —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ ¬´–¥–æ 18:00¬ª, ¬´deadline: –∑–∞–≤—Ç—Ä–∞ 21:00¬ª
    for pat in DEADLINE_HINTS:
        m = re.search(pat, text, flags=re.IGNORECASE)
        if m:
            try:
                return dateparser.parse(m.group(1), dayfirst=True, fuzzy=True)
            except Exception:
                continue
    return None

def build_buttons(links, gid, deadline=None):
    rows = []
    for url in links[:4]:
        rows.append([InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É", url=url)])
    # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    remind_row = [
        InlineKeyboardButton("–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞ 10 –º–∏–Ω", callback_data=f"remind:{gid}:10"),
        InlineKeyboardButton("–∑–∞ 1 —á–∞—Å", callback_data=f"remind:{gid}:60"),
    ]
    rows.append(remind_row)
    rows.append([InlineKeyboardButton("–í –∞—Ä—Ö–∏–≤", callback_data=f"archive:{gid}")])
    return InlineKeyboardMarkup(rows)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü–µ—Ä–µ—Å—ã–ª–∞–π –º–Ω–µ –ø–æ—Å—Ç—ã/—Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö (Portals, Stars –∏ —Ç.–ø.). "
        "–Ø –≤—ã—Ç–∞—â—É —Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂—É –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞ + —Å–º–æ–≥—É –Ω–∞–ø–æ–º–Ω–∏—Ç—å –ø–µ—Ä–µ–¥ –¥–µ–¥–ª–∞–π–Ω–æ–º."
    )

async def handle_forward(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    text = msg.text or msg.caption or ""
    links = extract_links(text)
    is_giveaway = matches_keywords(text) or bool(links)

    if not is_giveaway:
        await msg.reply_text("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ä–æ–∑—ã–≥—Ä—ã—à. –ï—Å–ª–∏ –≤—Å—ë –∂–µ –æ–Ω ‚Äî –ø—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π/—É—Å–ª–æ–≤–∏—è–º–∏.")
        return

    gid = str(uuid4())[:8]
    deadline = extract_deadline(text)
    GIVEAWAYS[gid] = {
        "from_chat": (msg.forward_from_chat.title if msg.forward_from_chat else None),
        "text": text,
        "links": links,
        "deadline": deadline,
        "archived": False
    }

    title = f"üéÅ –†–æ–∑—ã–≥—Ä—ã—à ({GIVEAWAYS[gid]['from_chat'] or '–ø–µ—Ä–µ—Å–ª–∞–Ω–æ'})\nID: {gid}"
    if deadline:
        title += f"\n–î–µ–¥–ª–∞–π–Ω: {deadline}"

    await msg.reply_text(
        title,
        reply_markup=build_buttons(links, gid, deadline)
    )

def schedule_reminder(chat_id, gid, minutes, application):
    when = datetime.now() + timedelta(minutes=minutes)
    def job():
        g = GIVEAWAYS.get(gid)
        if not g or g.get("archived"): return
        text = f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ —Ä–æ–∑—ã–≥—Ä—ã—à—É {gid}"
        buttons = build_buttons(g.get("links", []), gid, g.get("deadline"))
        application.create_task(application.bot.send_message(chat_id=chat_id, text=text, reply_markup=buttons))
    scheduler.add_job(job, "date", run_date=when)

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data

    if data.startswith("remind:"):
        _, gid, mins = data.split(":")
        schedule_reminder(q.message.chat_id, gid, int(mins), context.application)
        await q.edit_message_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {mins} –º–∏–Ω. (ID: {gid})")
    elif data.startswith("archive:"):
        _, gid = data.split(":")
        if gid in GIVEAWAYS: GIVEAWAYS[gid]["archived"] = True
        await q.edit_message_text(f"–†–æ–∑—ã–≥—Ä—ã—à {gid} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∞—Ä—Ö–∏–≤.")

async def list_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active = [ (gid, g) for gid, g in GIVEAWAYS.items() if not g.get("archived") ]
    if not active:
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫.")
        return
    lines = []
    for gid, g in active[:20]:
        lines.append(f"‚Ä¢ {gid}: { (g['from_chat'] or 'unknown') } | links: {len(g['links'])} | deadline: {g['deadline']}")
    await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã–µ:\n" + "\n".join(lines))

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_cmd))
    app.add_handler(CallbackQueryHandler(on_button))
    app.add_handler(MessageHandler(filters.UpdateType.MESSAGE & (filters.TEXT | filters.Caption) , handle_forward))
    app.run_polling()

if __name__ == "__main__":
    main()
